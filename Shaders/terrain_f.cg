//PBR terrain fragment shader for PSVita

#pragma argument (O4; fastmath; fastprecision; fastint)

struct UniformBufferFragmentLightingSimple
{
    unsigned int u_lightCount;
    float3 u_lightPositions[8];
    float3 u_lightColors[8];
    float u_lightPowers[8];
    float u_lightRadii[8];
};
UniformBufferFragmentLightingSimple u_perPFrame : BUFFER[0];

//lighting functions

//normal distribution function
float distributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    return a2 / (3.14159256 * denom * denom);
}

float geometrySchlickGGX(float NdotV, float roughness)
{
    //float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;
    //float denom = NdotV * (1.0 - k) + k;

    //simplified (r+1)^2/8
    float k = roughness * roughness * 0.125;

    //return NdotV / (denom);
    return NdotV / (NdotV * (1.0 - k) + k);
}

float geometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = geometrySchlickGGX(NdotL, roughness);
    float ggx2 = geometrySchlickGGX(NdotV, roughness);

    return ggx1 * ggx2;
}

float3 fresnelSchlick(float3 F0, float3 hVec, float3 vVec)
{
    //return F0 + (float3(1.0) - F0) * pow(1.0 - dot(vVec, hVec), 5.0);

    //Much faster
    float cosTheta = 1.0 - dot(vVec, hVec);
    float cosTheta2 = cosTheta * cosTheta;
    float cosTheta5 = cosTheta * cosTheta * cosTheta;
    return F0 + (float3(1.0) - F0) * cosTheta5;
}

void main(
    half2 pass_texCoord : TEXCOORD0_HALF,
    half2 pass_blendMapTexCoord : TEXCOORD1_HALF, // Not used in simplified version
    float4 pass_surfaceNormal : TEXCOORD2,
    half4 pass_worldPosition : TEXCOORD3_HALF,
    half4 pass_surfaceToViewVector : TEXCOORD4_HALF,
    float4 pass_tangent : TEXCOORD5,
    float4 pass_bitangent : TEXCOORD6,

    // Simple texture uniforms - no flags needed
    uniform sampler2D u_diffuseMap : TEXUNIT0,
    uniform sampler2D u_normalMap : TEXUNIT1,
    uniform sampler2D u_roughnessMap : TEXUNIT2,
    
    uniform float3 u_F0, // Fresnel reflectance at normal incidence

    out float4 out_color : COLOR)
{
    // Initialize ambient light
    float3 ambient = float3(0.05, 0.05, 0.05);
    float3 totalLight = float3(0.0, 0.0, 0.0);

    // Sample textures directly - no conditional logic
    float3 albedo = tex2D(u_diffuseMap, pass_texCoord).rgb;
    float roughness = tex2D(u_roughnessMap, pass_texCoord).r;
    float3 normalFromMap = tex2D(u_normalMap, pass_texCoord).rgb * 2.0 - 1.0;
    
    // Hardcoded material properties for terrain
    float metallic = 0.0; // Terrain is non-metallic
    float ao = 1.0; // No AO map, assume full lighting
    
    // Normalize the input vectors
    float3 N = normalize(pass_surfaceNormal.xyz);
    float3 T = normalize(pass_tangent.xyz);
    float3 B = normalize(pass_bitangent.xyz);
    //
    float3 V = normalize(pass_surfaceToViewVector.xyz);
    
    // Adjust for handedness
    if (dot(cross(N, T), B) < 0.0)
    {
        B = -B; // Fixed: flip bitangent instead of tangent
    }
    
    // Construct the TBN matrix
    float3x3 TBN = float3x3(T, B, N);
    
    // Transform normal from tangent space to world space
    float3 transformedNormal = normalize(mul(TBN, normalFromMap));
    
    float pi = 3.14159265;
    
    unsigned int lightCount = u_perPFrame.u_lightCount;

    // Calculate lighting contributions for each light
    for (unsigned int i = 0; i < lightCount; i++)
    {
        // Compute the vector from the surface to the light
        float3 surfaceToLight = u_perPFrame.u_lightPositions[i] - pass_worldPosition.xyz;
        float distSq = dot(surfaceToLight, surfaceToLight);

        //early out
        //if(distSq >= u_perPFrame.u_lightRadii[i] * u_perPFrame.u_lightRadii[i]) continue;
        // mask - 1 if inside radius, otherwise 0
        float radius = u_perPFrame.u_lightRadii[i];
        float radiusSq = radius * radius;
        float insideMask = step(distSq, radiusSq);
        // ^^ now we can multiply all contributions by insideMask to avoid branches in code

        float3 L = normalize(surfaceToLight);
        //     V = calculated before loop
        float3 H = normalize(L + V);

        float dist = length(surfaceToLight);
        float attenuation = 0.0;

        attenuation = u_perPFrame.u_lightPowers[i] / (4.0 * pi * dist * dist);
        attenuation = attenuation * (1.0 - dist / u_perPFrame.u_lightRadii[i]);
        //Instead of having the above attenuation inside an if (dist < u_perPFrame.u_lightRadii[i])
        attenuation = attenuation * insideMask;

        float NdotL = max(dot(transformedNormal, L), 0.0);
        if (NdotL > 0.0)
        {
            float3 lightColor = u_perPFrame.u_lightColors[i];
            lightColor *= attenuation;

            // Fresnel-Schlick approximation for reflectance
            float3 F = fresnelSchlick(u_F0, H, V);
            float NDF = distributionGGX(transformedNormal, H, roughness);
            float G = geometrySmith(transformedNormal, V, L, roughness);

            // Specular term
            float3 numerator = NDF * G * F;
            float denominator = 4.0 * max(dot(transformedNormal, V), 0.001) * max(dot(transformedNormal, L), 0.001);
            float3 specular = numerator / denominator;

            // kS is the Fresnel reflectance, kD is the diffuse component
            float3 kS = F;
            float3 kD = 1.0 - kS;
            kD *= 1.0 - metallic; // Will be 1.0 since metallic is 0

            // Lambertian diffuse
            float3 diffuse = kD * albedo / pi;

            // Accumulate light contribution
            totalLight += (diffuse + specular) * NdotL * lightColor;
        }
    }
    
    // Apply ambient occlusion (hardcoded to 1.0)
    float3 ambientContribution = ambient * albedo * ao;
    totalLight += ambientContribution;

    // Final color (no emissive in simplified version)
    float3 finalColor = totalLight;

    // Simple gamma correction
    //finalColor = pow(finalColor, float3(1.0 / 2.2));
    //much faster
    finalColor = sqrt(finalColor);
    
    out_color = float4(finalColor, 1.0);
}