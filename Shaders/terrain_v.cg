//PBR terrain vertex shader for PSVita

// Per frame uniforms are the same for every entity in the frame
// These don't change between draw calls, are only set once per frame

struct UniformBufferVertexMatricesPBR
{
	row_major float4x4 u_viewMatrix;
	row_major float4x4 u_projectionMatrix;
	float3 u_cameraPosition;
};
UniformBufferVertexMatricesPBR u_perVFrame : BUFFER[0];

void main(
	float3 in_position : POSITION,
	float2 in_texCoord : TEXCOORD0,
	float3 in_normal : NORMAL,
	float3 in_tangent : TANGENT,
	float3 in_bitangent : BINORMAL,

	uniform row_major float4x4 u_modelMatrix,

	out half4 out_position : POSITION,
	out half2 pass_texCoord : TEXCOORD0_HALF,
	out half2 pass_blendMapTexCoord : TEXCOORD1_HALF,
	out half4 pass_surfaceNormal : TEXCOORD2_HALF,
	out half4 pass_worldPosition : TEXCOORD3_HALF,
	out half4 pass_surfaceToViewVector : TEXCOORD4_HALF,
	out half4 pass_tangent : TEXCOORD5_HALF // pack sign in .w 
	)
{
    float4 worldPosition = mul(u_modelMatrix, float4(in_position, 1.0));
	
	out_position = mul(u_perVFrame.u_projectionMatrix, mul(u_perVFrame.u_viewMatrix, worldPosition));

	//tile 400x across terrain tiles
    pass_texCoord = in_texCoord; // * 400.0; UVs are scaled on the CPU
	//unitled for blend map
    pass_blendMapTexCoord = in_texCoord;
	
    float3 N = normalize(mul((float3x3) u_modelMatrix, in_normal));
	pass_surfaceNormal = half4(N, 0.0);
	
	//Tangent + handedness
    float3 T = normalize(mul((float3x3) u_modelMatrix, in_tangent));
	//Dropping this and packing the sign into tangent
	float3 B = normalize(mul((float3x3)u_modelMatrix, in_bitangent));
	// +1 if (N×T)·B>0, else –1
	float handedness = dot(cross(N, T), B) < 0.0 ? -1.0 : 1.0;
	pass_tangent = half4(T, handedness);
	
	pass_worldPosition = half4(worldPosition);
	
    pass_surfaceToViewVector = half4(u_perVFrame.u_cameraPosition - worldPosition.xyz, 0.0);
}
